<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
	<head>
		<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Language" content="en-us" />

		<title>Django | Form and field validation | Django Documentation</title>

		<meta name="ROBOTS" content="ALL" />
		<meta http-equiv="imagetoolbar" content="no" />
		<meta name="MSSmartTagsPreventParsing" content="true" />
		<meta name="Copyright" content="This site's design and contents Copyright (c) 2005  Lawrence Journal-World." />

		<meta name="keywords" content="Python, Django, framework, open-source" />
		<meta name="description" content="Django is a high-level Python Web framework that encourages rapid development and clean, pragmatic design." />

		<link href="http://media.djangoproject.com/css/base.css" rel="stylesheet" type="text/css" media="screen" />
		<link href="http://media.djangoproject.com/css/print.css" rel="stylesheet" type="text/css" media="print" />
      
  
  <style type="text/css" media="screen">
    #docs-search {
      color: #000;
      float: right;
    }
    #docs-search form {
      font-size: 92%;
      margin: 0;
      padding: 1em 1em 0;
      white-space: nowrap;
    }
    form.search ul {
      list-style: none;
      margin: 0;
      padding: 0;
    }
    form.search li {
      display: inline;
      padding-right: 1em;
    }
    form.search .query {
      width: 18em;
    }
  </style>
  <link rel="stylesheet" href="http://media.djangoproject.com/css/pygments.css" type="text/css" />

	</head>

	<body id="documentation" class="default">

	<div id="container">
		<div id="header">
			<h1 id="logo"><a href="http://www.djangoproject.com/"><img src="http://media.djangoproject.com/img/site/hdr_logo.gif" alt="Django" /></a></h1>
			<ul id="nav-global">
				<li id="nav-homepage"><a href="http://www.djangoproject.com/">Home</a></li>
				<li id="nav-download"><a href="http://www.djangoproject.com/download/">Download</a></li>
				<li id="nav-documentation"><a href="http://docs.djangoproject.com/">Documentation</a></li>
				<li id="nav-weblog"><a href="http://www.djangoproject.com/weblog/">Weblog</a></li>
				<li id="nav-community"><a href="http://www.djangoproject.com/community/">Community</a></li>
				<li id="nav-code"><a href="http://code.djangoproject.com/">Code</a></li>
			</ul>
		</div>
		<!-- END Header -->
		<div id="billboard">
  <h2><a href="../../../index.html">Django documentation</a></h2>
</div>
		<div id="columnwrap">
			
		<div id="content-main">
		


  <h2 class="deck">
  
    This document is for Django's SVN release, which can be
    significantly different from previous releases. Get old docs here: 
      <a href="http://docs.djangoproject.com/en/1.0/ref/forms/validation/">Django 1.0</a>
  
  </h2>
  <div class="section" id="s-form-and-field-validation">
<span id="s-ref-forms-validation"></span><span id="form-and-field-validation"></span><span id="ref-forms-validation"></span><h1>Form and field validation<a class="headerlink" href="index.html#form-and-field-validation" title="Permalink to this headline">Â¶</a></h1>
<p>Form validation happens when the data is cleaned. If you want to customize
this process, there are various places you can change, each one serving a
different purpose. Three types of cleaning methods are run during form
processing. These are normally executed when you call the <tt class="docutils literal"><span class="pre">is_valid()</span></tt>
method on a form. There are other things that can trigger cleaning and
validation (accessing the <tt class="docutils literal"><span class="pre">errors</span></tt> attribute or calling <tt class="docutils literal"><span class="pre">full_clean()</span></tt>
directly), but normally they won&#8217;t be needed.</p>
<p>In general, any cleaning method can raise <tt class="docutils literal"><span class="pre">ValidationError</span></tt> if there is a
problem with the data it is processing, passing the relevant error message to
the <tt class="docutils literal"><span class="pre">ValidationError</span></tt> constructor. If no <tt class="docutils literal"><span class="pre">ValidationError</span></tt> is raised, the
method should return the cleaned (normalized) data as a Python object.</p>
<p>If you detect multiple errors during a cleaning method and wish to signal all
of them to the form submitter, it is possible to pass a list of errors to the
<tt class="docutils literal"><span class="pre">ValidationError</span></tt> constructor.</p>
<p>The three types of cleaning methods are:</p>
<ul>
<li><p class="first">The <tt class="docutils literal"><span class="pre">clean()</span></tt> method on a Field subclass. This is responsible
for cleaning the data in a way that is generic for that type of field.
For example, a FloatField will turn the data into a Python <tt class="docutils literal"><span class="pre">float</span></tt> or
raise a <tt class="docutils literal"><span class="pre">ValidationError</span></tt>. This method returns the clean data, which
is then inserted into the <tt class="docutils literal"><span class="pre">cleaned_data</span></tt> dictionary of the form.</p>
</li>
<li><p class="first">The <tt class="docutils literal"><span class="pre">clean_&lt;fieldname&gt;()</span></tt> method in a form subclass &#8211; where
<tt class="docutils literal"><span class="pre">&lt;fieldname&gt;</span></tt> is replaced with the name of the form field attribute.
This method does any cleaning that is specific to that particular
attribute, unrelated to the type of field that it is. This method is not
passed any parameters. You will need to look up the value of the field
in <tt class="docutils literal"><span class="pre">self.cleaned_data</span></tt> and remember that it will be a Python object
at this point, not the original string submitted in the form (it will be
in <tt class="docutils literal"><span class="pre">cleaned_data</span></tt> because the general field <tt class="docutils literal"><span class="pre">clean()</span></tt> method, above,
has already cleaned the data once).</p>
<p>For example, if you wanted to validate that the contents of a
<tt class="docutils literal"><span class="pre">CharField</span></tt> called <tt class="docutils literal"><span class="pre">serialnumber</span></tt> was unique,
<tt class="docutils literal"><span class="pre">clean_serialnumber()</span></tt> would be the right place to do this. You don&#8217;t
need a specific field (it&#8217;s just a <tt class="docutils literal"><span class="pre">CharField</span></tt>), but you want a
formfield-specific piece of validation and, possibly,
cleaning/normalizing the data.</p>
<p>Just like the general field <tt class="docutils literal"><span class="pre">clean()</span></tt> method, above, this method
should return the cleaned data, regardless of whether it changed
anything or not.</p>
</li>
<li><p class="first">The Form subclass&#8217;s <tt class="docutils literal"><span class="pre">clean()</span></tt> method. This method can perform
any validation that requires access to multiple fields from the form at
once. This is where you might put in things to check that if field <tt class="docutils literal"><span class="pre">A</span></tt>
is supplied, field <tt class="docutils literal"><span class="pre">B</span></tt> must contain a valid e-mail address and the
like. The data that this method returns is the final <tt class="docutils literal"><span class="pre">cleaned_data</span></tt>
attribute for the form, so don&#8217;t forget to return the full list of
cleaned data if you override this method (by default, <tt class="docutils literal"><span class="pre">Form.clean()</span></tt>
just returns <tt class="docutils literal"><span class="pre">self.cleaned_data</span></tt>).</p>
<p>Note that any errors raised by your <tt class="docutils literal"><span class="pre">Form.clean()</span></tt> override will not
be associated with any field in particular. They go into a special
&#8220;field&#8221; (called <tt class="docutils literal"><span class="pre">__all__</span></tt>), which you can access via the
<tt class="docutils literal"><span class="pre">non_field_errors()</span></tt> method if you need to. If you want to attach
errors to a specific field in the form, you will need to access the
<tt class="docutils literal"><span class="pre">_errors</span></tt> attribute on the form, which is <a class="reference internal" href="index.html#described-later">described later</a>.</p>
</li>
</ul>
<p>These methods are run in the order given above, one field at a time.  That is,
for each field in the form (in the order they are declared in the form
definition), the <tt class="docutils literal"><span class="pre">Field.clean()</span></tt> method (or its override) is run, then
<tt class="docutils literal"><span class="pre">clean_&lt;fieldname&gt;()</span></tt>. Finally, once those two methods are run for every
field, the <tt class="docutils literal"><span class="pre">Form.clean()</span></tt> method, or its override, is executed.</p>
<p>Examples of each of these methods are provided below.</p>
<p>As mentioned, any of these methods can raise a <tt class="docutils literal"><span class="pre">ValidationError</span></tt>. For any
field, if the <tt class="docutils literal"><span class="pre">Field.clean()</span></tt> method raises a <tt class="docutils literal"><span class="pre">ValidationError</span></tt>, any
field-specific cleaning method is not called. However, the cleaning methods
for all remaining fields are still executed.</p>
<p>The <tt class="docutils literal"><span class="pre">clean()</span></tt> method for the <tt class="docutils literal"><span class="pre">Form</span></tt> class or subclass is always run. If
that method raises a <tt class="docutils literal"><span class="pre">ValidationError</span></tt>, <tt class="docutils literal"><span class="pre">cleaned_data</span></tt> will be an empty
dictionary.</p>
<p>The previous paragraph means that if you are overriding <tt class="docutils literal"><span class="pre">Form.clean()</span></tt>, you
should iterate through <tt class="docutils literal"><span class="pre">self.cleaned_data.items()</span></tt>, possibly considering the
<tt class="docutils literal"><span class="pre">_errors</span></tt> dictionary attribute on the form as well. In this way, you will
already know which fields have passed their individual validation requirements.</p>
<div class="section" id="s-form-subclasses-and-modifying-field-errors">
<span id="s-described-later"></span><span id="form-subclasses-and-modifying-field-errors"></span><span id="described-later"></span><h2>Form subclasses and modifying field errors<a class="headerlink" href="index.html#form-subclasses-and-modifying-field-errors" title="Permalink to this headline">Â¶</a></h2>
<p>Sometimes, in a form&#8217;s <tt class="docutils literal"><span class="pre">clean()</span></tt> method, you will want to add an error
message to a particular field in the form. This won&#8217;t always be appropriate
and the more typical situation is to raise a <tt class="docutils literal"><span class="pre">ValidationError</span></tt> from
<tt class="docutils literal"><span class="pre">Form.clean()</span></tt>, which is turned into a form-wide error that is available
through the <tt class="docutils literal"><span class="pre">Form.non_field_errors()</span></tt> method.</p>
<p>When you really do need to attach the error to a particular field, you should
store (or amend) a key in the <tt class="docutils literal"><span class="pre">Form._errors</span></tt> attribute. This attribute is an
instance of a <tt class="docutils literal"><span class="pre">django.forms.util.ErrorDict</span></tt> class. Essentially, though, it&#8217;s
just a dictionary. There is a key in the dictionary for each field in the form
that has an error. Each value in the dictionary is a
<tt class="docutils literal"><span class="pre">django.forms.util.ErrorList</span></tt> instance, which is a list that knows how to
display itself in different ways. So you can treat <tt class="docutils literal"><span class="pre">_errors</span></tt> as a dictionary
mapping field names to lists.</p>
<p>If you want to add a new error to a particular field, you should check whether
the key already exists in <tt class="docutils literal"><span class="pre">self._errors</span></tt> or not. If not, create a new entry
for the given key, holding an empty <tt class="docutils literal"><span class="pre">ErrorList</span></tt> instance. In either case,
you can then append your error message to the list for the field name in
question and it will be displayed when the form is displayed.</p>
<p>There is an example of modifying <tt class="docutils literal"><span class="pre">self._errors</span></tt> in the following section.</p>
<div class="admonition-what-s-in-a-name admonition ">
<p class="first admonition-title">What&#8217;s in a name?</p>
<p>You may be wondering why is this attribute called <tt class="docutils literal"><span class="pre">_errors</span></tt> and not
<tt class="docutils literal"><span class="pre">errors</span></tt>. Normal Python practice is to prefix a name with an underscore
if it&#8217;s not for external usage. In this case, you are subclassing the
<tt class="docutils literal"><span class="pre">Form</span></tt> class, so you are essentially writing new internals. In effect,
you are given permission to access some of the internals of <tt class="docutils literal"><span class="pre">Form</span></tt>.</p>
<p>Of course, any code outside your form should never access <tt class="docutils literal"><span class="pre">_errors</span></tt>
directly. The data is available to external code through the <tt class="docutils literal"><span class="pre">errors</span></tt>
property, which populates <tt class="docutils literal"><span class="pre">_errors</span></tt> before returning it).</p>
<p class="last">Another reason is purely historical: the attribute has been called
<tt class="docutils literal"><span class="pre">_errors</span></tt> since the early days of the forms module and changing it now
(particularly since <tt class="docutils literal"><span class="pre">errors</span></tt> is used for the read-only property name)
would be inconvenient for a number of reasons. You can use whichever
explanation makes you feel more comfortable. The result is the same.</p>
</div>
</div>
<div class="section" id="s-using-validation-in-practice">
<span id="using-validation-in-practice"></span><h2>Using validation in practice<a class="headerlink" href="index.html#using-validation-in-practice" title="Permalink to this headline">Â¶</a></h2>
<p>The previous sections explained how validation works in general for forms.
Since it can sometimes be easier to put things into place by seeing each
feature in use, here are a series of small examples that use each of the
previous features.</p>
<div class="section" id="s-form-field-default-cleaning">
<span id="form-field-default-cleaning"></span><h3>Form field default cleaning<a class="headerlink" href="index.html#form-field-default-cleaning" title="Permalink to this headline">Â¶</a></h3>
<p>Let&#8217;s firstly create a custom form field that validates its input is a string
containing comma-separated e-mail addresses, with at least one address. We&#8217;ll
keep it simple and assume e-mail validation is contained in a function called
<tt class="docutils literal"><span class="pre">is_valid_email()</span></tt>. The full class looks like this:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">from</span> <span class="nn">django</span> <span class="k">import</span> <span class="n">forms</span>

<span class="k">class</span> <span class="nc">MultiEmailField</span><span class="p">(</span><span class="n">forms</span><span class="o">.</span><span class="n">Field</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">clean</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        Check that the field contains one or more comma-separated emails</span>
<span class="sd">        and normalizes the data to a list of the email strings.</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">value</span><span class="p">:</span>
            <span class="k">raise</span> <span class="n">forms</span><span class="o">.</span><span class="n">ValidationError</span><span class="p">(</span><span class="s">&#39;Enter at least one e-mail address.&#39;</span><span class="p">)</span>
        <span class="n">emails</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">email</span> <span class="ow">in</span> <span class="n">emails</span><span class="p">:</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">is_valid_email</span><span class="p">(</span><span class="n">email</span><span class="p">):</span>
                <span class="k">raise</span> <span class="n">forms</span><span class="o">.</span><span class="n">ValidationError</span><span class="p">(</span><span class="s">&#39;</span><span class="si">%s</span><span class="s"> is not a valid e-mail address.&#39;</span> <span class="o">%</span> <span class="n">email</span><span class="p">)</span>

        <span class="c"># Always return the cleaned data.</span>
        <span class="k">return</span> <span class="n">emails</span>
</pre></div>
</div>
<p>Every form that uses this field will have this <tt class="docutils literal"><span class="pre">clean()</span></tt> method run before
anything else can be done with the field's data. This is cleaning that is
specific to this type of field, regardless of how it is subsequently used.</p>
<p>Let's create a simple <tt class="docutils literal"><span class="pre">ContactForm</span></tt> to demonstrate how you'd use this
field:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">ContactForm</span><span class="p">(</span><span class="n">forms</span><span class="o">.</span><span class="n">Form</span><span class="p">):</span>
    <span class="n">subject</span> <span class="o">=</span> <span class="n">forms</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mf">100</span><span class="p">)</span>
    <span class="n">message</span> <span class="o">=</span> <span class="n">forms</span><span class="o">.</span><span class="n">CharField</span><span class="p">()</span>
    <span class="n">sender</span> <span class="o">=</span> <span class="n">forms</span><span class="o">.</span><span class="n">EmailField</span><span class="p">()</span>
    <span class="n">recipients</span> <span class="o">=</span> <span class="n">MultiEmailField</span><span class="p">()</span>
    <span class="n">cc_myself</span> <span class="o">=</span> <span class="n">forms</span><span class="o">.</span><span class="n">BooleanField</span><span class="p">(</span><span class="n">required</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</pre></div>
</div>
<p>Simply use <tt class="docutils literal"><span class="pre">MultiEmailField</span></tt> like any other form field. When the
<tt class="docutils literal"><span class="pre">is_valid()</span></tt> method is called on the form, the <tt class="docutils literal"><span class="pre">MultiEmailField.clean()</span></tt>
method will be run as part of the cleaning process.</p>
</div>
<div class="section" id="s-cleaning-a-specific-field-attribute">
<span id="cleaning-a-specific-field-attribute"></span><h3>Cleaning a specific field attribute<a class="headerlink" href="index.html#cleaning-a-specific-field-attribute" title="Permalink to this headline">Â¶</a></h3>
<p>Continuing on from the previous example, suppose that in our <tt class="docutils literal"><span class="pre">ContactForm</span></tt>,
we want to make sure that the <tt class="docutils literal"><span class="pre">recipients</span></tt> field always contains the address
<tt class="docutils literal"><span class="pre">&quot;fred&#64;example.com&quot;</span></tt>. This is validation that is specific to our form, so we
don't want to put it into the general <tt class="docutils literal"><span class="pre">MultiEmailField</span></tt> class. Instead, we
write a cleaning method that operates on the <tt class="docutils literal"><span class="pre">recipients</span></tt> field, like so:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">ContactForm</span><span class="p">(</span><span class="n">forms</span><span class="o">.</span><span class="n">Form</span><span class="p">):</span>
    <span class="c"># Everything as before.</span>
    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">clean_recipients</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">data</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">cleaned_data</span><span class="p">[</span><span class="s">&#39;recipients&#39;</span><span class="p">]</span>
        <span class="k">if</span> <span class="s">&quot;fred@example.com&quot;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
            <span class="k">raise</span> <span class="n">forms</span><span class="o">.</span><span class="n">ValidationError</span><span class="p">(</span><span class="s">&quot;You have forgotten about Fred!&quot;</span><span class="p">)</span>

        <span class="c"># Always return the cleaned data, whether you have changed it or</span>
        <span class="c"># not.</span>
        <span class="k">return</span> <span class="n">data</span>
</pre></div>
</div>
</div>
<div class="section" id="s-cleaning-and-validating-fields-that-depend-on-each-other">
<span id="cleaning-and-validating-fields-that-depend-on-each-other"></span><h3>Cleaning and validating fields that depend on each other<a class="headerlink" href="index.html#cleaning-and-validating-fields-that-depend-on-each-other" title="Permalink to this headline">Â¶</a></h3>
<p>Suppose we add another requirement to our contact form: if the <tt class="docutils literal"><span class="pre">cc_myself</span></tt>
field is <tt class="xref docutils literal"><span class="pre">True</span></tt>, the <tt class="docutils literal"><span class="pre">subject</span></tt> must contain the word <tt class="docutils literal"><span class="pre">&quot;help&quot;</span></tt>. We are
performing validation on more than one field at a time, so the form's
<tt class="docutils literal"><span class="pre">clean()</span></tt> method is a good spot to do this. Notice that we are talking about
the <tt class="docutils literal"><span class="pre">clean()</span></tt> method on the form here, whereas earlier we were writing a
<tt class="docutils literal"><span class="pre">clean()</span></tt> method on a field. It's important to keep the field and form
difference clear when working out where to validate things. Fields are single
data points, forms are a collection of fields.</p>
<p>By the time the form's <tt class="docutils literal"><span class="pre">clean()</span></tt> method is called, all the individual field
clean methods will have been run (the previous two sections), so
<tt class="docutils literal"><span class="pre">self.cleaned_data</span></tt> will be populated with any data that has survived so
far. So you also need to remember to allow for the fact that the fields you
are wanting to validate might not have survived the initial individual field
checks.</p>
<p>There are two way to report any errors from this step. Probably the most
common method is to display the error at the top of the form. To create such
an error, you can raise a <tt class="docutils literal"><span class="pre">ValidationError</span></tt> from the <tt class="docutils literal"><span class="pre">clean()</span></tt> method. For
example:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">ContactForm</span><span class="p">(</span><span class="n">forms</span><span class="o">.</span><span class="n">Form</span><span class="p">):</span>
    <span class="c"># Everything as before.</span>
    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">clean</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">cleaned_data</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">cleaned_data</span>
        <span class="n">cc_myself</span> <span class="o">=</span> <span class="n">cleaned_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;cc_myself&quot;</span><span class="p">)</span>
        <span class="n">subject</span> <span class="o">=</span> <span class="n">cleaned_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;subject&quot;</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">cc_myself</span> <span class="ow">and</span> <span class="n">subject</span><span class="p">:</span>
            <span class="c"># Only do something if both fields are valid so far.</span>
            <span class="k">if</span> <span class="s">&quot;help&quot;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">subject</span><span class="p">:</span>
                <span class="k">raise</span> <span class="n">forms</span><span class="o">.</span><span class="n">ValidationError</span><span class="p">(</span><span class="s">&quot;Did not send for &#39;help&#39; in &quot;</span>
                        <span class="s">&quot;the subject despite CC&#39;ing yourself.&quot;</span><span class="p">)</span>

        <span class="c"># Always return the full collection of cleaned data.</span>
        <span class="k">return</span> <span class="n">cleaned_data</span>
</pre></div>
</div>
<p>In this code, if the validation error is raised, the form will display an
error message at the top of the form (normally) describing the problem.</p>
<p>The second approach might involve assigning the error message to one of the
fields. In this case, let's assign an error message to both the &quot;subject&quot; and
&quot;cc_myself&quot; rows in the form display. Be careful when doing this in practice,
since it can lead to confusing form output. We're showing what is possible
here and leaving it up to you and your designers to work out what works
effectively in your particular situation. Our new code (replacing the previous
sample) looks like this:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">from</span> <span class="nn">django.forms.util</span> <span class="k">import</span> <span class="n">ErrorList</span>

<span class="k">class</span> <span class="nc">ContactForm</span><span class="p">(</span><span class="n">forms</span><span class="o">.</span><span class="n">Form</span><span class="p">):</span>
    <span class="c"># Everything as before.</span>
    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">clean</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">cleaned_data</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">cleaned_data</span>
        <span class="n">cc_myself</span> <span class="o">=</span> <span class="n">cleaned_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;cc_myself&quot;</span><span class="p">)</span>
        <span class="n">subject</span> <span class="o">=</span> <span class="n">cleaned_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;subject&quot;</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">cc_myself</span> <span class="ow">and</span> <span class="n">subject</span> <span class="ow">and</span> <span class="s">&quot;help&quot;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">subject</span><span class="p">:</span>
            <span class="c"># We know these are not in self._errors now (see discussion</span>
            <span class="c"># below).</span>
            <span class="n">msg</span> <span class="o">=</span> <span class="s">u&quot;Must put &#39;help&#39; in subject when cc&#39;ing yourself.&quot;</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_errors</span><span class="p">[</span><span class="s">&quot;cc_myself&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">ErrorList</span><span class="p">([</span><span class="n">msg</span><span class="p">])</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_errors</span><span class="p">[</span><span class="s">&quot;subject&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">ErrorList</span><span class="p">([</span><span class="n">msg</span><span class="p">])</span>

            <span class="c"># These fields are no longer valid. Remove them from the</span>
            <span class="c"># cleaned data.</span>
            <span class="k">del</span> <span class="n">cleaned_data</span><span class="p">[</span><span class="s">&quot;cc_myself&quot;</span><span class="p">]</span>
            <span class="k">del</span> <span class="n">cleaned_data</span><span class="p">[</span><span class="s">&quot;subject&quot;</span><span class="p">]</span>

        <span class="c"># Always return the full collection of cleaned data.</span>
        <span class="k">return</span> <span class="n">cleaned_data</span>
</pre></div>
</div>
<p>As you can see, this approach requires a bit more effort, not withstanding the
extra design effort to create a sensible form display. The details are worth
noting, however. Firstly, earlier we mentioned that you might need to check if
the field name keys already exist in the <tt class="docutils literal"><span class="pre">_errors</span></tt> dictionary. In this case,
since we know the fields exist in <tt class="docutils literal"><span class="pre">self.cleaned_data</span></tt>, they must have been
valid when cleaned as individual fields, so there will be no corresponding
entries in <tt class="docutils literal"><span class="pre">_errors</span></tt>.</p>
<p>Secondly, once we have decided that the combined data in the two fields we are
considering aren't valid, we must remember to remove them from the
<tt class="docutils literal"><span class="pre">cleaned_data</span></tt>.</p>
<p>In fact, Django will currently completely wipe out the <tt class="docutils literal"><span class="pre">cleaned_data</span></tt>
dictionary if there are any errors in the form. However, this behaviour may
change in the future, so it's not a bad idea to clean up after yourself in the
first place.</p>
</div>
</div>
</div>



<div id="content-secondary">
  <h2 id="comments">Questions/Feedback</h2>
  <p>Having trouble? We'd like to help!</p>
  <ul>
    <li>
      Try the <a href="../../../faq/index.html">FAQ</a> â it's got answers to many common
      questions.
    </li>
    <li>
      Search for information in the <a
      href="http://groups.google.com/group/django-users/">archives of the
      django-users mailing list</a>, or <a
      href="http://groups.google.com/group/django-users/">post a question</a>.
    </li>
    <li>
      Ask a question in the <a href="irc://irc.freenode.net/">#django IRC
      channel</a>, or search the <a href="http://oebfare.com/logger/django/">IRC
      logs</a> to see if its been asked before.
    </li>
    <li>
      If you notice errors with this documentation, please <a
      href="http://code.djangoproject.com/simpleticket?component=Documentation">
      open a ticket</a> and let us know! Please only use the ticket tracker for
      criticisms and improvements on the docs. For tech support, use the
      resources above.
    </li>
  </ul>
</div>

		</div>
		<!-- END #content-main -->
		<div id="content-related" class="sidebar">
		
  
    <h2>Contents</h2>
    
      <ul>
<li><a class="reference external" href="index.html">Form and field validation</a><ul>
<li><a class="reference external" href="index.html#form-subclasses-and-modifying-field-errors">Form subclasses and modifying field errors</a></li>
<li><a class="reference external" href="index.html#using-validation-in-practice">Using validation in practice</a><ul>
<li><a class="reference external" href="index.html#form-field-default-cleaning">Form field default cleaning</a></li>
<li><a class="reference external" href="index.html#cleaning-a-specific-field-attribute">Cleaning a specific field attribute</a></li>
<li><a class="reference external" href="index.html#cleaning-and-validating-fields-that-depend-on-each-other">Cleaning and validating fields that depend on each other</a></li>
</ul>
</li>
</ul>
</li>
</ul>

    
  
  
  
    <h2>Search</h2>
    
    <form action="../../../search/index.html" id="search" class="search">
  <div>
    <input type="hidden" name="cx" value="009763561546736975936:e88ek0eurf4" />
    <input type="hidden" name="cof" value="FORID:11" />
    <input type="hidden" name="ie" value="UTF-8" />
    <input type="hidden" name="hl" value="" />
    <input id="id_search_q" type="text" class="query" name="q" />
    <input type="submit" name="sa" class="submit" value="Search" />
    <ul>
<li><label for="id_search_as_q_0"><input checked="checked" type="radio" id="id_search_as_q_0" value="more:dev_docs" name="as_q" /> Latest</label></li>
<li><label for="id_search_as_q_1"><input type="radio" id="id_search_as_q_1" value="more:1.0_docs" name="as_q" /> 1.0</label></li>
<li><label for="id_search_as_q_2"><input type="radio" id="id_search_as_q_2" value="more:0.96_docs" name="as_q" /> 0.96</label></li>
<li><label for="id_search_as_q_3"><input type="radio" id="id_search_as_q_3" value="more:all_docs" name="as_q" /> All</label></li>
</ul>
  </div>
</form>
<script type="text/javascript" src="http://www.google.com/coop/cse/brand?form=search&amp;lang="></script>
  
  
  
    <h2>Browse</h2>
    <ul>
      
        
          <li>Prev: <a href="../widgets/index.html">Widgets</a></li>
        
        
          <li>Next: <a href="../../generic-views/index.html">Generic views</a></li>
        
        <li><a href="../../../contents/index.html">Table of contents</a></li>
        
          <li><a href="../../../genindex/index.html">General Index</a></li>
        
          <li><a href="../../../modindex/index.html">Global Module Index</a></li>
        
      
    </ul>
  
  
  
    <h2>You are here:</h2>
    <ul>
      
        <li>
          <a href="../../../index.html">Django dev documentation</a>
          
            <ul><li><a href="../../index.html">API Reference</a>
          
            <ul><li><a href="../index.html">Forms</a>
          
          <ul><li>Form and field validation</li></ul>
          </li></ul></li></ul>
        </li>
      
    </ul>
  
  
  
    <h3>Last update:</h3>
    <div>November 19, 2009, 4 p.m. (<a href="http://www.timeanddate.com/worldclock/city.html?n=64">CDT</a>)</div>
  

		</div>
		<!-- END #content-related -->

		</div>
		<!-- END #content -->
		<div id="footer">
			<p>&copy; 2005-2009 <a href="http://www.djangoproject.com/foundation/">Django Software Foundation</a> unless otherwise noted. Django is a registered trademark of the Django Software Foundation. 
			Hosting graciously provided by <a href="http://mediatemple.net/">
			<img style="vertical-align: middle; position: relative; top: -1px;" src="http://media.djangoproject.com/img/site/mt.png" alt="media temple" /></a>
			</p>
		</div>
		<!-- END #footer -->
	</div>
	<!-- END #container -->
	</body>
</html>

