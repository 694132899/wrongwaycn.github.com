<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
	<head>
		<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Language" content="en-us" />

		<title>Django | Signals | Django Documentation</title>

		<meta name="ROBOTS" content="ALL" />
		<meta http-equiv="imagetoolbar" content="no" />
		<meta name="MSSmartTagsPreventParsing" content="true" />
		<meta name="Copyright" content="This site's design and contents Copyright (c) 2005  Lawrence Journal-World." />

		<meta name="keywords" content="Python, Django, framework, open-source" />
		<meta name="description" content="Django is a high-level Python Web framework that encourages rapid development and clean, pragmatic design." />

		<link href="http://media.djangoproject.com/css/base.css" rel="stylesheet" type="text/css" media="screen" />
		<link href="http://media.djangoproject.com/css/print.css" rel="stylesheet" type="text/css" media="print" />
      
  
  <style type="text/css" media="screen">
    #docs-search {
      color: #000;
      float: right;
    }
    #docs-search form {
      font-size: 92%;
      margin: 0;
      padding: 1em 1em 0;
      white-space: nowrap;
    }
    form.search ul {
      list-style: none;
      margin: 0;
      padding: 0;
    }
    form.search li {
      display: inline;
      padding-right: 1em;
    }
    form.search .query {
      width: 18em;
    }
  </style>
  <link rel="stylesheet" href="http://media.djangoproject.com/css/pygments.css" type="text/css" />

	</head>

	<body id="documentation" class="default">

	<div id="container">
		<div id="header">
			<h1 id="logo"><a href="http://www.djangoproject.com/"><img src="http://media.djangoproject.com/img/site/hdr_logo.gif" alt="Django" /></a></h1>
			<ul id="nav-global">
				<li id="nav-homepage"><a href="http://www.djangoproject.com/">Home</a></li>
				<li id="nav-download"><a href="http://www.djangoproject.com/download/">Download</a></li>
				<li id="nav-documentation"><a href="http://docs.djangoproject.com/">Documentation</a></li>
				<li id="nav-weblog"><a href="http://www.djangoproject.com/weblog/">Weblog</a></li>
				<li id="nav-community"><a href="http://www.djangoproject.com/community/">Community</a></li>
				<li id="nav-code"><a href="http://code.djangoproject.com/">Code</a></li>
			</ul>
		</div>
		<!-- END Header -->
		<div id="billboard">
  <h2><a href="../../index.html">Django documentation</a></h2>
</div>
		<div id="columnwrap">
			
		<div id="content-main">
		


  <h2 class="deck">
  
    This document is for Django's SVN release, which can be
    significantly different from previous releases. Get old docs here: 
      <a href="http://docs.djangoproject.com/en/1.0/topics/signals/">Django 1.0</a>
  
  </h2>
  <div class="section" id="s-module-django.dispatch">
<span id="s-topics-signals"></span><span id="module-django.dispatch"></span><span id="topics-signals"></span><h1>Signals<a class="headerlink" href="index.html#module-django.dispatch" title="Permalink to this headline">¶</a></h1>
<p>Django includes a &#8220;signal dispatcher&#8221; which helps allow decoupled applications
get notified when actions occur elsewhere in the framework. In a nutshell,
signals allow certain <em>senders</em> to notify a set of <em>receivers</em> that some action
has taken place. They&#8217;re especially useful when many pieces of code may be
interested in the same events.</p>
<p>Django provides a <a class="reference external" href="../../ref/signals/index.html#ref-signals"><em>set of built-in signals</em></a> that let user
code get notified by Django itself of certain actions. These include some useful
notifications:</p>
<ul>
<li><p class="first"><a title="django.db.models.signals.pre_save" class="reference external" href="../../ref/signals/index.html#django.db.models.signals.pre_save"><tt class="xref docutils literal"><span class="pre">django.db.models.signals.pre_save</span></tt></a> &amp;
<a title="django.db.models.signals.post_save" class="reference external" href="../../ref/signals/index.html#django.db.models.signals.post_save"><tt class="xref docutils literal"><span class="pre">django.db.models.signals.post_save</span></tt></a></p>
<p>Sent before or after a model&#8217;s <a title="django.db.models.Model.save" class="reference external" href="../../ref/models/instances/index.html#django.db.models.Model.save"><tt class="xref docutils literal"><span class="pre">save()</span></tt></a> method
is called.</p>
</li>
<li><p class="first"><a title="django.db.models.signals.pre_delete" class="reference external" href="../../ref/signals/index.html#django.db.models.signals.pre_delete"><tt class="xref docutils literal"><span class="pre">django.db.models.signals.pre_delete</span></tt></a> &amp;
<a title="django.db.models.signals.post_delete" class="reference external" href="../../ref/signals/index.html#django.db.models.signals.post_delete"><tt class="xref docutils literal"><span class="pre">django.db.models.signals.post_delete</span></tt></a></p>
<p>Sent before or after a model&#8217;s <a title="django.db.models.Model.delete" class="reference external" href="../../ref/models/instances/index.html#django.db.models.Model.delete"><tt class="xref docutils literal"><span class="pre">delete()</span></tt></a>
method is called.</p>
</li>
<li><p class="first"><a title="django.core.signals.request_started" class="reference external" href="../../ref/signals/index.html#django.core.signals.request_started"><tt class="xref docutils literal"><span class="pre">django.core.signals.request_started</span></tt></a> &amp;
<a title="django.core.signals.request_finished" class="reference external" href="../../ref/signals/index.html#django.core.signals.request_finished"><tt class="xref docutils literal"><span class="pre">django.core.signals.request_finished</span></tt></a></p>
<p>Sent when Django starts or finishes an HTTP request.</p>
</li>
</ul>
<p>See the <a class="reference external" href="../../ref/signals/index.html#ref-signals"><em>built-in signal documentation</em></a> for a complete list,
and a complete explanation of each signal.</p>
<p>You can also <a class="reference internal" href="index.html#defining-and-sending-signals">define and send your own custom signals</a>; see below.</p>
<div class="section" id="s-listening-to-signals">
<span id="listening-to-signals"></span><h2>Listening to signals<a class="headerlink" href="index.html#listening-to-signals" title="Permalink to this headline">¶</a></h2>
<p>To receive a signal, you need to register a <em>receiver</em> function that gets called
when the signal is sent. Let&#8217;s see how this works by registering a signal that
gets called after each HTTP request is finished. We&#8217;ll be connecting to the
<a title="django.core.signals.request_finished" class="reference external" href="../../ref/signals/index.html#django.core.signals.request_finished"><tt class="xref docutils literal"><span class="pre">request_finished</span></tt></a> signal.</p>
<div class="section" id="s-receiver-functions">
<span id="receiver-functions"></span><h3>Receiver functions<a class="headerlink" href="index.html#receiver-functions" title="Permalink to this headline">¶</a></h3>
<p>First, we need to define a receiver function. A receiver can be any Python function or method:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">def</span> <span class="nf">my_callback</span><span class="p">(</span><span class="n">sender</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="k">print</span> <span class="s">&quot;Request finished!&quot;</span>
</pre></div>
</div>
<p>Notice that the function takes a <tt class="docutils literal"><span class="pre">sender</span></tt> argument, along with wildcard
keyword arguments (<tt class="docutils literal"><span class="pre">**kwargs</span></tt>); all signal handlers must take these arguments.</p>
<p>We'll look at senders <a class="reference internal" href="index.html#connecting-to-signals-sent-by-specific-senders">a bit later</a>, but right now look at the <tt class="docutils literal"><span class="pre">**kwargs</span></tt>
argument. All signals send keyword arguments, and may change those keyword
arguments at any time. In the case of
<a title="django.core.signals.request_finished" class="reference external" href="../../ref/signals/index.html#django.core.signals.request_finished"><tt class="xref docutils literal"><span class="pre">request_finished</span></tt></a>, it's documented as sending no
arguments, which means we might be tempted to write our signal handling as
<tt class="docutils literal"><span class="pre">my_callback(sender)</span></tt>.</p>
<p>This would be wrong -- in fact, Django will throw an error if you do so. That's
because at any point arguments could get added to the signal and your receiver
must be able to handle those new arguments.</p>
</div>
<div class="section" id="s-connecting-receiver-functions">
<span id="connecting-receiver-functions"></span><h3>Connecting receiver functions<a class="headerlink" href="index.html#connecting-receiver-functions" title="Permalink to this headline">¶</a></h3>
<p>Next, we'll need to connect our receiver to the signal:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">from</span> <span class="nn">django.core.signals</span> <span class="k">import</span> <span class="n">request_finished</span>

<span class="n">request_finished</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">my_callback</span><span class="p">)</span>
</pre></div>
</div>
<p>Now, our <tt class="docutils literal"><span class="pre">my_callback</span></tt> function will be called each time a request finishes.</p>
<div class="admonition-where-should-this-code-live admonition ">
<p class="first admonition-title">Where should this code live?</p>
<p class="last">You can put signal handling and registration code anywhere you like.
However, you'll need to make sure that the module it's in gets imported
early on so that the signal handling gets registered before any signals need
to be sent. This makes your app's <tt class="docutils literal"><span class="pre">models.py</span></tt> a good place to put
registration of signal handlers.</p>
</div>
</div>
<div class="section" id="s-connecting-to-signals-sent-by-specific-senders">
<span id="connecting-to-signals-sent-by-specific-senders"></span><h3>Connecting to signals sent by specific senders<a class="headerlink" href="index.html#connecting-to-signals-sent-by-specific-senders" title="Permalink to this headline">¶</a></h3>
<p>Some signals get sent many times, but you'll only be interested in recieving a
certain subset of those signals. For example, consider the
<a title="django.db.models.signals.pre_save" class="reference external" href="../../ref/signals/index.html#django.db.models.signals.pre_save"><tt class="xref docutils literal"><span class="pre">django.db.models.signals.pre_save</span></tt></a> signal sent before a model gets saved.
Most of the time, you don't need to know when <em>any</em> model gets saved -- just
when one <em>specific</em> model is saved.</p>
<p>In these cases, you can register to receive signals sent only by particular
senders. In the case of <a title="django.db.models.signals.pre_save" class="reference external" href="../../ref/signals/index.html#django.db.models.signals.pre_save"><tt class="xref docutils literal"><span class="pre">django.db.models.signals.pre_save</span></tt></a>, the sender
will be the model class being saved, so you can indicate that you only want
signals sent by some model:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">from</span> <span class="nn">django.db.models.signals</span> <span class="k">import</span> <span class="n">pre_save</span>
<span class="k">from</span> <span class="nn">myapp.models</span> <span class="k">import</span> <span class="n">MyModel</span>

<span class="k">def</span> <span class="nf">my_handler</span><span class="p">(</span><span class="n">sender</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="o">...</span>

<span class="n">pre_save</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">my_handler</span><span class="p">,</span> <span class="n">sender</span><span class="o">=</span><span class="n">MyModel</span><span class="p">)</span>
</pre></div>
</div>
<p>The <tt class="docutils literal"><span class="pre">my_handler</span></tt> function will only be called when an instance of <tt class="docutils literal"><span class="pre">MyModel</span></tt>
is saved.</p>
<p>Different signals use different objects as their senders; you'll need to consult
the <a class="reference external" href="../../ref/signals/index.html#ref-signals"><em>built-in signal documentation</em></a> for details of each
particular signal.</p>
</div>
</div>
<div class="section" id="s-defining-and-sending-signals">
<span id="defining-and-sending-signals"></span><h2>Defining and sending signals<a class="headerlink" href="index.html#defining-and-sending-signals" title="Permalink to this headline">¶</a></h2>
<p>Your applications can take advantage of the signal infrastructure and provide its own signals.</p>
<div class="section" id="s-defining-signals">
<span id="defining-signals"></span><h3>Defining signals<a class="headerlink" href="index.html#defining-signals" title="Permalink to this headline">¶</a></h3>
<dl class="class">
<dt id="django.dispatch.Signal">
<!--[django.dispatch.Signal]-->class <tt class="descname">Signal</tt>(<span class="optional">[</span><em>providing_args=list</em><span class="optional">]</span>)<a class="headerlink" href="index.html#django.dispatch.Signal" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<p>All signals are <a title="django.dispatch.Signal" class="reference internal" href="index.html#django.dispatch.Signal"><tt class="xref docutils literal"><span class="pre">django.dispatch.Signal</span></tt></a> instances. The
<tt class="docutils literal"><span class="pre">providing_args</span></tt> is a list of the names of arguments the signal will provide
to listeners.</p>
<p>For example:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">import</span> <span class="nn">django.dispatch</span>

<span class="n">pizza_done</span> <span class="o">=</span> <span class="n">django</span><span class="o">.</span><span class="n">dispatch</span><span class="o">.</span><span class="n">Signal</span><span class="p">(</span><span class="n">providing_args</span><span class="o">=</span><span class="p">[</span><span class="s">&quot;toppings&quot;</span><span class="p">,</span> <span class="s">&quot;size&quot;</span><span class="p">])</span>
</pre></div>
</div>
<p>This declares a <tt class="docutils literal"><span class="pre">pizza_done</span></tt> signal that will provide receivers with
<tt class="docutils literal"><span class="pre">toppings</span></tt> and <tt class="docutils literal"><span class="pre">size</span></tt> arguments.</p>
<p>Remember that you're allowed to change this list of arguments at any time, so getting the API right on the first try isn't necessary.</p>
</div>
<div class="section" id="s-sending-signals">
<span id="sending-signals"></span><h3>Sending signals<a class="headerlink" href="index.html#sending-signals" title="Permalink to this headline">¶</a></h3>
<dl class="method">
<dt id="django.dispatch.Signal.send">
<!--[django.dispatch.Signal.send]--><tt class="descclassname">Signal.</tt><tt class="descname">send</tt>(<em>sender</em>, <em>**kwargs</em>)<a class="headerlink" href="index.html#django.dispatch.Signal.send" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<p>To send a signal, call <a title="django.dispatch.Signal.send" class="reference internal" href="index.html#django.dispatch.Signal.send"><tt class="xref docutils literal"><span class="pre">Signal.send()</span></tt></a>. You must provide the <tt class="docutils literal"><span class="pre">sender</span></tt> argument, and may provide as many other keyword arguments as you like.</p>
<p>For example, here's how sending our <tt class="docutils literal"><span class="pre">pizza_done</span></tt> signal might look:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">PizzaStore</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">send_pizza</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">toppings</span><span class="p">,</span> <span class="n">size</span><span class="p">):</span>
        <span class="n">pizza_done</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">sender</span><span class="o">=</span><span class="bp">self</span><span class="p">,</span> <span class="n">toppings</span><span class="o">=</span><span class="n">toppings</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="n">size</span><span class="p">)</span>
        <span class="o">...</span>
</pre></div>
</div>
</div>
</div>
</div>



<div id="content-secondary">
  <h2 id="comments">Questions/Feedback</h2>
  <p>Having trouble? We'd like to help!</p>
  <ul>
    <li>
      Try the <a href="../../faq/index.html">FAQ</a> — it's got answers to many common
      questions.
    </li>
    <li>
      Search for information in the <a
      href="http://groups.google.com/group/django-users/">archives of the
      django-users mailing list</a>, or <a
      href="http://groups.google.com/group/django-users/">post a question</a>.
    </li>
    <li>
      Ask a question in the <a href="irc://irc.freenode.net/">#django IRC
      channel</a>, or search the <a href="http://oebfare.com/logger/django/">IRC
      logs</a> to see if its been asked before.
    </li>
    <li>
      If you notice errors with this documentation, please <a
      href="http://code.djangoproject.com/simpleticket?component=Documentation">
      open a ticket</a> and let us know! Please only use the ticket tracker for
      criticisms and improvements on the docs. For tech support, use the
      resources above.
    </li>
  </ul>
</div>

		</div>
		<!-- END #content-main -->
		<div id="content-related" class="sidebar">
		
  
    <h2>Contents</h2>
    
      <ul>
<li><a class="reference external" href="index.html">Signals</a><ul>
<li><a class="reference external" href="index.html#listening-to-signals">Listening to signals</a><ul>
<li><a class="reference external" href="index.html#receiver-functions">Receiver functions</a></li>
<li><a class="reference external" href="index.html#connecting-receiver-functions">Connecting receiver functions</a></li>
<li><a class="reference external" href="index.html#connecting-to-signals-sent-by-specific-senders">Connecting to signals sent by specific senders</a></li>
</ul>
</li>
<li><a class="reference external" href="index.html#defining-and-sending-signals">Defining and sending signals</a><ul>
<li><a class="reference external" href="index.html#defining-signals">Defining signals</a></li>
<li><a class="reference external" href="index.html#sending-signals">Sending signals</a></li>
</ul>
</li>
</ul>
</li>
</ul>

    
  
  
  
    <h2>Search</h2>
    
    <form action="../../search/index.html" id="search" class="search">
  <div>
    <input type="hidden" name="cx" value="009763561546736975936:e88ek0eurf4" />
    <input type="hidden" name="cof" value="FORID:11" />
    <input type="hidden" name="ie" value="UTF-8" />
    <input type="hidden" name="hl" value="" />
    <input id="id_search_q" type="text" class="query" name="q" />
    <input type="submit" name="sa" class="submit" value="Search" />
    <ul>
<li><label for="id_search_as_q_0"><input checked="checked" type="radio" id="id_search_as_q_0" value="more:dev_docs" name="as_q" /> Latest</label></li>
<li><label for="id_search_as_q_1"><input type="radio" id="id_search_as_q_1" value="more:1.0_docs" name="as_q" /> 1.0</label></li>
<li><label for="id_search_as_q_2"><input type="radio" id="id_search_as_q_2" value="more:0.96_docs" name="as_q" /> 0.96</label></li>
<li><label for="id_search_as_q_3"><input type="radio" id="id_search_as_q_3" value="more:all_docs" name="as_q" /> All</label></li>
</ul>
  </div>
</form>
<script type="text/javascript" src="http://www.google.com/coop/cse/brand?form=search&amp;lang="></script>
  
  
  
    <h2>Browse</h2>
    <ul>
      
        
          <li>Prev: <a href="../settings/index.html">Django settings</a></li>
        
        
          <li>Next: <a href="../../howto/index.html">&#8220;How-to&#8221; guides</a></li>
        
        <li><a href="../../contents/index.html">Table of contents</a></li>
        
          <li><a href="../../genindex/index.html">General Index</a></li>
        
          <li><a href="../../modindex/index.html">Global Module Index</a></li>
        
      
    </ul>
  
  
  
    <h2>You are here:</h2>
    <ul>
      
        <li>
          <a href="../../index.html">Django dev documentation</a>
          
            <ul><li><a href="../index.html">Using Django</a>
          
          <ul><li>Signals</li></ul>
          </li></ul>
        </li>
      
    </ul>
  
  
  
    <h3>Last update:</h3>
    <div>November 19, 2009, 4 p.m. (<a href="http://www.timeanddate.com/worldclock/city.html?n=64">CDT</a>)</div>
  

		</div>
		<!-- END #content-related -->

		</div>
		<!-- END #content -->
		<div id="footer">
			<p>&copy; 2005-2009 <a href="http://www.djangoproject.com/foundation/">Django Software Foundation</a> unless otherwise noted. Django is a registered trademark of the Django Software Foundation. 
			Hosting graciously provided by <a href="http://mediatemple.net/">
			<img style="vertical-align: middle; position: relative; top: -1px;" src="http://media.djangoproject.com/img/site/mt.png" alt="media temple" /></a>
			</p>
		</div>
		<!-- END #footer -->
	</div>
	<!-- END #container -->
	</body>
</html>

